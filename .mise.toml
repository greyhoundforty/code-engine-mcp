[tools]
python = "3.12"
usage = "latest"

[env]
_.python.venv = { path = ".venv", create = true }
PROJECT_NAME = "{{ config_root | basename }}"
PREFIX = "{{ env.PROJECT_NAME }}"
DOCKER_IMAGE = "{{ env.PREFIX }}"
CONTAINER_NAME = "{{ env.PREFIX }}-container"
DOCKER_TAG = "1.0"

[tasks."uv:reqs"]
description = "Install dependencies from requirements file"
alias = "uvr"
run = "uv pip install -r requirements.txt"

[tasks."uv:freeze"]
description = "Create requirements.txt from currently installed modules"
alias = "uvf"
run = "uv pip freeze > requirements.txt"

[tasks."uv:install"]
description = "Install pip packages"
alias = "uvi"
run = "uv pip install"

[tasks."uv:dev"]
description = "Install development dependencies"
alias = "uvd"
run = '''
uv pip install -r requirements.txt
uv pip install black flake8 mypy pytest pytest-asyncio pytest-cov bandit safety
'''

[tasks.info]
description = "Print project information"
run = '''
echo "Project: $PROJECT_NAME"
echo "Virtual Environment: $VIRTUAL_ENV"
echo "Docker Image: $DOCKER_IMAGE:$DOCKER_TAG"
echo "Container Name: $CONTAINER_NAME"
'''

# Code Quality Tasks
[tasks.lint]
description = "Run flake8 linting"
run = "flake8 ce_mcp_server.py utils.py --max-line-length=88 --extend-ignore=E203,W503"

[tasks.format]
description = "Format code with black"
run = "black ce_mcp_server.py utils.py"

[tasks."format:check"]
description = "Check code formatting without making changes"
run = "black --check ce_mcp_server.py utils.py"

[tasks.typecheck]
description = "Run mypy type checking"
run = "mypy ce_mcp_server.py utils.py --ignore-missing-imports"

[tasks.security]
description = "Run security checks"
run = '''
echo "🔒 Running bandit security scan..."
bandit -r . -f json -o bandit-report.json || true
echo "🔒 Checking for known vulnerabilities..."
safety check
'''

[tasks.quality]
description = "Run all code quality checks"
depends = ["format:check", "lint", "typecheck", "security"]
run = "echo '✅ All quality checks passed!'"

# Testing Tasks
[tasks.test]
description = "Run tests"
run = "pytest tests/ -v"

[tasks."test:cov"]
description = "Run tests with coverage"
run = "pytest tests/ -v --cov=. --cov-report=html --cov-report=term"

[tasks."test:mcp:minimal"]
description = "Test minimal MCP server setup"
alias = "tmm"
run = '''
echo "🧪 Testing minimal MCP setup..."
python minimal_mcp_test.py
'''

[tasks."test:mcp"]
description = "Test MCP library imports and functionality"
alias = "tm"
run = '''
echo "🧪 Testing MCP library..."
python test_mcp_imports.py
'''

[tasks."run:server"]
description = "Run the MCP server"
alias = "rs"
run = '''
echo "🚀 Starting MCP server..."
python ce_mcp_server_v2.py
'''

# Docker Tasks
[tasks."docker:build"]
description = "Build Docker image for MCP server"
alias = "db"
run = '''
echo "🔨 Building Docker image: $DOCKER_IMAGE:$DOCKER_TAG"
docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
echo "✅ Docker image built successfully"
'''

[tasks."docker:build:multi"]
description = "Build multi-platform Docker image"
run = '''
echo "🔨 Building multi-platform Docker image..."
docker buildx build --platform linux/amd64,linux/arm64 -t $DOCKER_IMAGE:$DOCKER_TAG .
'''

[tasks."docker:run"]
description = "Run MCP server in Docker container"
alias = "dr"
run = '''
echo "🚀 Starting MCP server container: $CONTAINER_NAME"
if [ -z "$IBMCLOUD_API_KEY" ]; then
  echo "❌ ERROR: IBMCLOUD_API_KEY environment variable not set"
  echo "Please set it with: export IBMCLOUD_API_KEY='your-api-key'"
  exit 1
fi

# Stop existing container if running
docker stop $CONTAINER_NAME 2>/dev/null || true
docker rm $CONTAINER_NAME 2>/dev/null || true

# Run new container
docker run -d \
  --name $CONTAINER_NAME \
  -e IBMCLOUD_API_KEY="$IBMCLOUD_API_KEY" \
  -e PYTHONUNBUFFERED=1 \
  -e LOG_LEVEL=INFO \
  --restart unless-stopped \
  $DOCKER_IMAGE:$DOCKER_TAG

echo "✅ Container started successfully"
echo "📋 Check status: docker ps"
echo "📝 View logs: docker logs $CONTAINER_NAME"
'''

[tasks."docker:run:interactive"]
description = "Run MCP server interactively for debugging"
alias = "dri"
run = '''
echo "🚀 Starting MCP server container interactively..."
if [ -z "$IBMCLOUD_API_KEY" ]; then
  echo "❌ ERROR: IBMCLOUD_API_KEY environment variable not set"
  exit 1
fi

docker run -it --rm \
  --name $CONTAINER_NAME-debug \
  -e IBMCLOUD_API_KEY="$IBMCLOUD_API_KEY" \
  -e PYTHONUNBUFFERED=1 \
  -e LOG_LEVEL=DEBUG \
  $DOCKER_IMAGE:$DOCKER_TAG
'''

[tasks."docker:shell"]
description = "Open shell in running container"
run = "docker exec -it $CONTAINER_NAME /bin/bash"

[tasks."docker:logs"]
description = "Show container logs"
alias = "dl"
run = "docker logs -f $CONTAINER_NAME"

[tasks."docker:stop"]
description = "Stop and remove container"
alias = "ds"
run = '''
echo "🛑 Stopping container: $CONTAINER_NAME"
docker stop $CONTAINER_NAME 2>/dev/null || true
docker rm $CONTAINER_NAME 2>/dev/null || true
echo "✅ Container stopped and removed"
'''

[tasks."docker:scan"]
description = "Scan Docker image for vulnerabilities"
run = '''
echo "🔍 Scanning Docker image for vulnerabilities..."
docker scout quickview $DOCKER_IMAGE:$DOCKER_TAG || echo "Docker Scout not available, skipping scan"
'''

[tasks."docker:size"]
description = "Check Docker image size"
run = "docker images $DOCKER_IMAGE:$DOCKER_TAG --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}'"

# Development Tasks
[tasks.dev]
description = "Start development environment"
depends = ["uv:dev"]
run = '''
echo "🚀 Development environment ready!"
echo "💡 Useful commands:"
echo "  - mise run test: Run tests"
echo "  - mise run lint: Check code style"
echo "  - mise run docker:build: Build Docker image"
echo "  - mise run docker:run:interactive: Debug container"
'''

[tasks."dev:watch"]
description = "Watch for file changes and rebuild"
run = '''
echo "👀 Watching for changes..."
while inotifywait -e modify -r .; do
  echo "🔄 Files changed, running quality checks..."
  mise run quality || true
done
'''

[tasks.clean]
description = "Clean up build artifacts and containers"
run = '''
echo "🧹 Cleaning up..."
# Remove Python cache
find . -type f -name "*.pyc" -delete
find . -type d -name "__pycache__" -delete
# Remove test artifacts
rm -rf .pytest_cache htmlcov bandit-report.json
# Stop and remove containers
docker stop $CONTAINER_NAME 2>/dev/null || true
docker rm $CONTAINER_NAME 2>/dev/null || true
# Remove Docker images (uncomment if desired)
# docker rmi $DOCKER_IMAGE:$DOCKER_TAG 2>/dev/null || true
echo "✅ Cleanup complete"
'''

# Release Tasks
[tasks."release:check"]
description = "Pre-release checks"
depends = ["quality", "test", "docker:build"]
run = '''
echo "🎯 Pre-release checks completed!"
echo "📋 Summary:"
echo "  ✅ Code quality checks passed"
echo "  ✅ Tests passed"
echo "  ✅ Docker image built successfully"
'''

[tasks."release:tag"]
description = "Tag Docker image with version"
run = '''
if [ -z "$VERSION" ]; then
  echo "❌ ERROR: VERSION not set"
  echo "Usage: VERSION=1.0.0 mise run release:tag"
  exit 1
fi
docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:$VERSION
echo "✅ Tagged image as $DOCKER_IMAGE:$VERSION"
'''

# Utility Tasks
[tasks.env]
description = "Show environment variables"
run = '''
echo "Environment Variables:"
echo "IBMCLOUD_API_KEY: ${IBMCLOUD_API_KEY:+***SET***}"
echo "LOG_LEVEL: ${LOG_LEVEL:-INFO}"
echo "PROJECT_NAME: $PROJECT_NAME"
echo "DOCKER_IMAGE: $DOCKER_IMAGE"
'''

[tasks.requirements]
description = "Generate requirements.txt with pinned versions"
run = '''
echo "📦 Generating requirements.txt..."
pip freeze | grep -E "(ibm-code-engine-sdk|mcp)" > requirements.txt
echo "✅ Requirements saved to requirements.txt"
'''
